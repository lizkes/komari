name: Release Binaries

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to use for the image (must start with v)"
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    outputs:
      tag_name: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
            # 验证tag是否以v开头
            if [[ ! "$TAG" =~ ^v.* ]]; then
              echo "错误: Tag必须以'v'开头 (例如: v1.0.0)"
              exit 1
            fi
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          else
            # 从push tags事件中提取tag
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.tag }} \
            --title "Release ${{ steps.version.outputs.tag }}" \
            --notes "自动发布 ${{ steps.version.outputs.tag }}" \
            --repo ${{ github.repository }}

  build-and-attach-binaries:
    runs-on: ubuntu-latest
    needs: create-release

    strategy:
      matrix:
        goos: [windows, linux]
        goarch: [amd64, arm64]
        include:
          # Windows
          - goos: windows
            goarch: amd64
            zig_target_triple: x86_64-windows-gnu
            binary_extension: .exe
          - goos: windows
            goarch: arm64
            zig_target_triple: aarch64-windows-gnu
            binary_extension: .exe

          # Linux
          - goos: linux
            goarch: amd64
            zig_target_triple: x86_64-linux-musl
            binary_extension: ""
          - goos: linux
            goarch: arm64
            zig_target_triple: aarch64-linux-musl
            binary_extension: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Clone and build frontend
        run: |
          git clone https://github.com/lizkes/komari-web web
          cd web
          npm install
          npm run build
          cd ..
          mkdir -p public/dist
          cp -r web/dist/* public/dist/

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install Zig cross-compiler toolchain
        run: |
          sudo apt-get update # Update apt package lists
          sudo apt-get install -y build-essential curl
          wget https://ziglang.org/download/0.14.1/zig-x86_64-linux-0.14.1.tar.xz
          sudo tar -C /usr/local -Jxf zig-x86_64-linux-0.14.1.tar.xz
          echo "PATH=$PATH:/usr/local/zig-x86_64-linux-0.14.1" >> $GITHUB_ENV

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CC: zig cc -target ${{ matrix.zig_target_triple }}
          GIN_MODE: release
        run: |
          BINARY_NAME=komari-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.binary_extension }}" != "" ]; then
            BINARY_NAME=${BINARY_NAME}${{ matrix.binary_extension }}
          fi
          VERSION="${{ needs.create-release.outputs.tag_name }}"
          VERSION_HASH="${{ github.sha }}" # Use commit SHA for hash
          go build -trimpath -ldflags="-s -w -X github.com/komari-monitor/komari/utils.CurrentVersion=${VERSION} -X github.com/komari-monitor/komari/utils.VersionHash=${VERSION_HASH}" -o $BINARY_NAME

      - name: Upload binary to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define the binary name for upload
          BINARY_NAME=komari-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME=${BINARY_NAME}.exe
          fi
          # Upload the binary as a release asset using GitHub CLI
          gh release upload ${{ needs.create-release.outputs.tag_name }} $BINARY_NAME --repo ${{ github.repository }}
        shell: bash
